import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,a as e}from"./app-4e9ca916.js";const p={},o=e(`<p>本文内容来自互联网</p><h3 id="ffmpeg-windows相关命令" tabindex="-1"><a class="header-anchor" href="#ffmpeg-windows相关命令" aria-hidden="true">#</a> FFMPEG，windows相关命令</h3><p>一款强大的音视频处理开源库。</p><h4 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念" aria-hidden="true">#</a> 相关概念</h4><ul><li><p>音/视频流</p><p>在音视频领域，一路音/视频成为一路流。</p></li><li><p>容器</p><p>一般把mp4、flv、mov等文件格式称之为容器。在这些常用格式文件中可以存放多路音视频文件。以mp4为例，可以存放一路视频流，多路音频流，多路字幕流。</p></li><li><p>channel</p><p>channel是音频中的概念，称之为声道，在一路音频流中可以有单声道、双声道和立体声。</p></li></ul><h4 id="ffmpeg命令" tabindex="-1"><a class="header-anchor" href="#ffmpeg命令" aria-hidden="true">#</a> ffmpeg命令</h4><ul><li>基本命令格式</li></ul><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>ffmpeg [global_options] {[input_file_options] -i input_url}... {[output_file_options] output_url}...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="windows下查看音视频设备" tabindex="-1"><a class="header-anchor" href="#windows下查看音视频设备" aria-hidden="true">#</a> windows下查看音视频设备</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-list_devices</span> <span class="token boolean">true</span> <span class="token parameter variable">-f</span> dshow <span class="token parameter variable">-i</span> dummy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="音视频录制" tabindex="-1"><a class="header-anchor" href="#音视频录制" aria-hidden="true">#</a> 音视频录制</h4><ul><li>screen-capture-recorder</li></ul><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>下载地址https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>rdp<span class="token operator">/</span>screen<span class="token operator">-</span>capture<span class="token operator">-</span>recorder<span class="token operator">-</span>to<span class="token operator">-</span>video<span class="token operator">-</span>windows<span class="token operator">-</span>free<span class="token operator">/</span>releases
桌面采集工具，可以用来录制桌面
自带虚拟音频捕获器，录制桌面的音频
需要安装javajre
它还包括一个免费的、通用的、开源的DirectShow桌面<span class="token operator">/</span>屏幕源捕获过滤器。
配合ffmpeg录屏
ffmpeg <span class="token operator">-</span>f dshow  <span class="token operator">-</span>i video<span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;screen-capture-recorder&quot;</span></span>  <span class="token operator">-</span>r <span class="token number">20</span> <span class="token operator">-</span>t <span class="token number">10</span> screen<span class="token operator">-</span>capture<span class="token punctuation">.</span>mp4 
<span class="token comment"># -t 10 for 10 seconds recording</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>录屏</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token comment">#列出设备列表</span>
ffmpeg <span class="token operator">-</span>list_devices true <span class="token operator">-</span>f dshow <span class="token operator">-</span>i dummy
<span class="token comment">#全屏录像</span>
ffmpeg <span class="token operator">-</span>f dshow <span class="token operator">-</span>i video=<span class="token string">&quot;screen-capture-recorder&quot;</span> <span class="token operator">-</span>f dshow <span class="token operator">-</span>i audio=<span class="token string">&quot;virtual-audio-capturer&quot;</span> <span class="token operator">-</span>vcodec libx264 <span class="token operator">-</span>acodec libmp3lame <span class="token operator">-</span>s 1280x720 <span class="token operator">-</span>r 15 e:<span class="token operator">/</span>temp/temp<span class="token punctuation">.</span>mkv
<span class="token operator">-</span>f指定使用dshow采集数据
<span class="token operator">-</span>i指定从哪里采集数据
<span class="token operator">-</span>r指定帧率（<span class="token operator">-</span>framerate用来限制输入，<span class="token operator">-</span>r用来限制输出），桌面的输入对帧率没有要求，所以不用限制桌面的帧率，其实限制了也没用。
<span class="token operator">-</span>s设置窗口大小 <span class="token operator">-</span>s 100x200 将桌面画布压缩为100x200
<span class="token comment">#gdigrab录屏，h264编码</span>
ffmpeg <span class="token operator">-</span>f gdigrab <span class="token operator">-</span>i desktop <span class="token operator">-</span>f dshow <span class="token operator">-</span>i audio=<span class="token string">&quot;virtual-audio-capturer&quot;</span> <span class="token operator">-</span>vcodec libx264 <span class="token operator">-</span>acodec libmp3lame <span class="token operator">-</span>s 1280x720 <span class="token operator">-</span>r 15 G:\\ffmpeg\\testout\\temp<span class="token punctuation">.</span>mkv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>音视频录制</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#调用本地麦克风录制音频，保存到文件</span>
ffmpeg <span class="token parameter variable">-f</span> dshow <span class="token parameter variable">-i</span> <span class="token assign-left variable">audio</span><span class="token operator">=</span><span class="token string">&quot;麦克风（Conexant SmartAudio HD）&quot;</span>  G:/testout/1.mp3
<span class="token comment">#调用摄像头录制视频，并保存到文件</span>
ffmpeg <span class="token parameter variable">-f</span> dshow <span class="token parameter variable">-i</span> <span class="token assign-left variable">video</span><span class="token operator">=</span><span class="token string">&quot;Lenvo EasyCamera&quot;</span> G:/testout/1.flv
<span class="token comment">#调用摄像头和麦克风录制音视频，保存到文件</span>
ffmpeg <span class="token parameter variable">-f</span> dshow <span class="token parameter variable">-i</span> <span class="token assign-left variable">video</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span> <span class="token parameter variable">-f</span> dshow <span class="token parameter variable">-i</span> <span class="token assign-left variable">audio</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span> G:/testout/2.flv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="直播推流" tabindex="-1"><a class="header-anchor" href="#直播推流" aria-hidden="true">#</a> 直播推流</h4><ul><li>推流摄像头</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>ffmpeg <span class="token operator">-</span>f dshow <span class="token operator">-</span>i video=<span class="token string">&quot;Lenovo EasyCamera&quot;</span>:audio=<span class="token string">&quot;麦克风 (Conexant SmartAudio HD)&quot;</span> <span class="token operator">-</span>acodec aac <span class="token operator">-</span>strict experimental <span class="token operator">-</span>ar 44100 <span class="token operator">-</span>b:a 200k <span class="token operator">-</span>b:v 1500k  <span class="token operator">-</span>preset:v veryfast <span class="token operator">-</span>f flv  rtmp:<span class="token operator">/</span><span class="token operator">/</span>203<span class="token punctuation">.</span>195<span class="token punctuation">.</span>150<span class="token punctuation">.</span>231:1935/live/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>推流桌面</li></ul><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>ffmpeg <span class="token operator">-f</span> dshow <span class="token operator">-</span>i video<span class="token operator">=</span><span class="token string">&quot;screen-capture-recorder&quot;</span><span class="token punctuation">:</span>audio<span class="token operator">=</span><span class="token string">&quot;virtual-audio-capturer&quot;</span> <span class="token operator">-</span>acodec aac <span class="token operator">-</span>strict experimental <span class="token operator">-</span>ar <span class="token number">44100</span> <span class="token operator">-b</span><span class="token punctuation">:</span>a 150k <span class="token operator">-b</span><span class="token punctuation">:</span>v 2500k  <span class="token operator">-</span>preset<span class="token punctuation">:</span>v veryfast <span class="token operator">-f</span> flv  rtmp<span class="token punctuation">:</span><span class="token regex">//</span><span class="token operator">*</span><span class="token operator">.</span><span class="token operator">*</span><span class="token operator">.</span><span class="token operator">*</span><span class="token operator">.</span><span class="token operator">*</span><span class="token operator">/</span>live<span class="token operator">/</span>vad
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>推流桌面音频</li></ul><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>ffmpeg <span class="token operator">-f</span> dshow <span class="token operator">-</span>i audio<span class="token operator">=</span><span class="token string">&quot;virtual-audio-capturer&quot;</span> <span class="token operator">-</span>vcodec libx264 <span class="token operator">-</span>acodec aac <span class="token operator">-</span>strict experimental <span class="token operator">-</span>ar <span class="token number">44100</span> <span class="token operator">-b</span><span class="token punctuation">:</span>a 200k <span class="token operator">-b</span><span class="token punctuation">:</span>v 2500k  <span class="token operator">-</span>preset<span class="token punctuation">:</span>v ultrafast <span class="token operator">-f</span> flv  rtmp<span class="token punctuation">:</span><span class="token regex">//</span><span class="token operator">*</span><span class="token operator">.</span><span class="token operator">*</span><span class="token operator">.</span><span class="token operator">*</span><span class="token operator">.</span><span class="token operator">*</span><span class="token operator">/</span>live<span class="token operator">/</span>vad
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-推流rtsp-rtsp</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-i</span> rtsp://192.168.0.189:554/stream/main <span class="token parameter variable">-codec</span> copy <span class="token parameter variable">-rtsp_transport</span> tcp <span class="token parameter variable">-r</span> <span class="token number">15</span> <span class="token parameter variable">-s</span> 1366x768 <span class="token parameter variable">-f</span> rtsp rtsp://x.x.x.x:554/stream/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>待分析</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>ffmpeg <span class="token operator">-</span>f dshow <span class="token operator">-</span>i video=<span class="token string">&quot;Logitech QuickCam Pro 9000&quot;</span>:audio=<span class="token string">&quot;麦克风 (Pro 9000)&quot;</span> <span class="token operator">-</span>vcodec libx264  <span class="token operator">-</span>ar 44100 <span class="token operator">-</span>b:a 160k <span class="token operator">-</span>b:v 1000k <span class="token operator">-</span>s 640*360 <span class="token operator">-</span>g 1 <span class="token operator">-</span>keyint_min 2  <span class="token operator">-</span>acodec  <span class="token function">copy</span> <span class="token operator">-</span>preset:v veryfast <span class="token operator">-</span>f flv rtmp:<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">/</span>live/vad
ffmpeg <span class="token operator">-</span>f dshow <span class="token operator">-</span>i video=<span class="token string">&quot;Logitech QuickCam Pro 9000&quot;</span>:audio=<span class="token string">&quot;麦克风 (Pro 9000)&quot;</span> <span class="token operator">-</span>vcodec libx264 <span class="token operator">-</span>acodec  <span class="token function">copy</span> <span class="token operator">-</span>preset:v ultrafast  <span class="token operator">-</span>f flv rtmp:<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">/</span>live/vad <span class="token operator">-</span>ar 44100  <span class="token operator">-</span>g 1 <span class="token operator">-</span>keyint_min 1
ffmpeg <span class="token operator">-</span>f dshow <span class="token operator">-</span>i video=<span class="token string">&quot;Logitech QuickCam Pro 9000&quot;</span>:audio=<span class="token string">&quot;麦克风 (Pro 9000)&quot;</span> <span class="token operator">-</span>vcodec libx264  <span class="token operator">-</span>b:a 160k <span class="token operator">-</span>r 30 <span class="token operator">-</span>b:v 500k <span class="token operator">-</span>s 640*360 <span class="token operator">-</span>acodec  <span class="token function">copy</span> <span class="token operator">-</span>preset:v veryfast <span class="token operator">-</span>tune:v zerolatency  <span class="token operator">-</span>f flv rtmp:<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">/</span>live/vad
ffmpeg <span class="token operator">-</span>f dshow <span class="token operator">-</span>i video=<span class="token string">&quot;USB Video Device&quot;</span>:audio=<span class="token string">&quot;麦克风 (USB Audio Device)&quot;</span> <span class="token operator">-</span>vcodec libx264 <span class="token operator">-</span>acodec <span class="token function">copy</span> <span class="token operator">-</span>preset:v ultrafast <span class="token operator">-</span>tune:v zerolatency <span class="token operator">-</span>f flv <span class="token string">&quot;rtmp://push.syocn.com/live/vad&quot;</span>
ffmpeg <span class="token operator">-</span>f dshow <span class="token operator">-</span>i video=<span class="token string">&quot;USB Video Device&quot;</span>:audio=<span class="token string">&quot;麦克风 (USB Audio Device)&quot;</span> <span class="token operator">-</span>vcodec libx264 <span class="token operator">-</span>ar 44100 <span class="token operator">-</span>s 720*480 <span class="token operator">-</span>acodec <span class="token function">copy</span> <span class="token operator">-</span>preset:v ultrafast <span class="token operator">-</span>tune:v zerolatency <span class="token operator">-</span>f flv <span class="token string">&quot;rtmp://push.syocn.com/live/vad&quot;</span>

ffmpeg <span class="token operator">-</span>f dshow <span class="token operator">-</span>i video=<span class="token string">&quot;Logitech QuickCam Pro 9000&quot;</span>:audio=<span class="token string">&quot;麦克风 (Pro 9000)&quot;</span> <span class="token operator">-</span>vcodec libx264  <span class="token operator">-</span><span class="token function">ac</span> 2 <span class="token operator">-</span>b:a 160k <span class="token operator">-</span>r 30 <span class="token operator">-</span>b:v 500k <span class="token operator">-</span>s 640*360 <span class="token operator">-</span>acodec  <span class="token function">copy</span> <span class="token operator">-</span>preset:v veryfast   <span class="token string">&quot;rtmp://push.syocn.com/live/vad&quot;</span>
ffmpeg <span class="token operator">-</span>f dshow <span class="token operator">-</span>i video=<span class="token string">&quot;Logitech QuickCam Pro 9000&quot;</span>:audio=<span class="token string">&quot;麦克风 (Pro 9000)&quot;</span> <span class="token operator">-</span>vcodec libx264 <span class="token operator">-</span>ar 44100 <span class="token operator">-</span>s 350*300 <span class="token operator">-</span>b:v 100k <span class="token operator">-</span>acodec <span class="token function">copy</span> <span class="token operator">-</span>preset:v ultrafast <span class="token operator">-</span>tune:v zerolatency <span class="token operator">-</span>f flv <span class="token string">&quot;rtmp://push.syocn.com/live/vad&quot;</span>

rtmp:<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">/</span>live/vad
<span class="token operator">-</span>s 720*480
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>推流视频</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ffmpeg <span class="token operator">-</span>re <span class="token operator">-</span>i f<span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">.</span>mp4 <span class="token operator">-</span>vcodec <span class="token builtin">copy</span> <span class="token operator">-</span>acodec <span class="token builtin">copy</span> <span class="token operator">-</span>f flv <span class="token operator">-</span>r <span class="token number">30</span> <span class="token operator">-</span>b<span class="token punctuation">:</span>v 1000k  rtmp<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment">/*.*.*.*/</span>live<span class="token operator">/</span>vad2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>循环推流视频</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ffmpeg <span class="token operator">-</span>re <span class="token operator">-</span>stream_loop <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i f<span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">.</span>mp4 <span class="token operator">-</span>vcodec <span class="token builtin">copy</span> <span class="token operator">-</span>acodec <span class="token builtin">copy</span> <span class="token operator">-</span>f flv <span class="token operator">-</span>r <span class="token number">30</span> <span class="token operator">-</span>b<span class="token punctuation">:</span>v 1000k  rtmp<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment">/*.*.*.*/</span>live<span class="token operator">/</span>vad2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>rtmp流</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token comment">#推流到流服务器</span>
ffmpeg <span class="token operator">-</span>f dshow <span class="token operator">-</span>i video=<span class="token string">&quot;screen-capture-recorder&quot;</span> <span class="token operator">-</span>r 15 <span class="token operator">-</span>s 990x512 <span class="token operator">-</span>f flv rtmp:<span class="token operator">/</span><span class="token operator">/</span>203<span class="token punctuation">.</span>195<span class="token punctuation">.</span>150<span class="token punctuation">.</span>231:1935/live/

<span class="token comment">#使用ffplay拉流播放</span>
ffplay <span class="token string">&quot;rtmp://203.195.150.231:1935/live/ live=1&quot;</span>

<span class="token comment">#读取流音频，保存到本地</span>
ffmpeg –i rtsp:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>3<span class="token punctuation">.</span>205:5555/test –vcodec <span class="token function">copy</span> out<span class="token punctuation">.</span>avi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>cmd中文乱码问题</p><p>在命令行下执行命令“ chcp 65001” 将windows命令行窗口的编码改为了utf-8编码</p></li><li><p>rtmp流播放</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffplay <span class="token string">&quot;rtmp://192.168.134.130:1936/live/dc live=1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>rtmp流</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token comment">#推流到流服务器</span>
ffmpeg <span class="token operator">-</span>f dshow <span class="token operator">-</span>i video=<span class="token string">&quot;screen-capture-recorder&quot;</span> <span class="token operator">-</span>r 15 <span class="token operator">-</span>s 990x512 <span class="token operator">-</span>f flv rtmp:<span class="token operator">/</span><span class="token operator">/</span>203<span class="token punctuation">.</span>195<span class="token punctuation">.</span>150<span class="token punctuation">.</span>231:1935/live/

<span class="token comment">#使用ffplay拉流播放</span>
ffplay <span class="token string">&quot;rtmp://203.195.150.231:1935/live/ live=1&quot;</span>

<span class="token comment">#读取流音频，保存到本地</span>
ffmpeg –i rtsp:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>3<span class="token punctuation">.</span>205:5555/test –vcodec <span class="token function">copy</span> out<span class="token punctuation">.</span>avi
ffmpeg <span class="token operator">-</span>re <span class="token operator">-</span>i out<span class="token punctuation">.</span>mp4 <span class="token operator">-</span>c <span class="token function">copy</span> <span class="token operator">-</span>f flv rtmp:<span class="token operator">/</span><span class="token operator">/</span>server/live/streamName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="格式转换" tabindex="-1"><a class="header-anchor" href="#格式转换" aria-hidden="true">#</a> 格式转换</h4><ul><li>将0806.mp4由mp4转换为flv</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>ffmpeg -i 0806.mp4 0806f.flv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="视频截取" tabindex="-1"><a class="header-anchor" href="#视频截取" aria-hidden="true">#</a> 视频截取</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ffmpeg  <span class="token operator">-</span>i <span class="token number">0806</span><span class="token punctuation">.</span>mp4 <span class="token operator">-</span>vcodec <span class="token builtin">copy</span> <span class="token operator">-</span>acodec <span class="token builtin">copy</span> <span class="token operator">-</span>ss <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span> <span class="token operator">-</span>to <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">30</span> cutout<span class="token punctuation">.</span>mp4 <span class="token operator">-</span>y      （不精确，会有几秒的误差）
ffmpeg <span class="token operator">-</span>accurate_seek <span class="token operator">-</span>i I<span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">.</span>mp4 <span class="token operator">-</span>codec <span class="token builtin">copy</span> <span class="token operator">-</span>y <span class="token operator">-</span>ss <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token operator">-</span>to <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">30</span> I<span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">8</span><span class="token operator">-</span>cut<span class="token punctuation">.</span>mp4	<span class="token punctuation">(</span>更精确<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加字幕" tabindex="-1"><a class="header-anchor" href="#添加字幕" aria-hidden="true">#</a> 添加字幕</h4><div class="language-objectivec line-numbers-mode" data-ext="objectivec"><pre class="language-objectivec"><code><span class="token number">1</span><span class="token punctuation">)</span>嵌入到视频<span class="token punctuation">(</span>嵌入到视频流<span class="token punctuation">)</span>
ffmpeg <span class="token operator">-</span>i <span class="token number">0806.</span>mp4 <span class="token operator">-</span>vf subtitles<span class="token operator">=</span>a<span class="token punctuation">.</span>srt srtout<span class="token punctuation">.</span>mp4 
<span class="token number">2</span><span class="token punctuation">)</span>嵌入到视频<span class="token punctuation">(</span>嵌入到字幕流<span class="token punctuation">)</span>
ffmpeg <span class="token operator">-</span>i <span class="token number">0806.</span>mp4 <span class="token operator">-</span>i a<span class="token punctuation">.</span>srt <span class="token operator">-</span>c<span class="token punctuation">:</span>s mov_text <span class="token operator">-</span>c<span class="token punctuation">:</span>v copy <span class="token operator">-</span>c<span class="token punctuation">:</span>a copy srtout3<span class="token punctuation">.</span>mp4

ffmpeg <span class="token operator">-</span>i video<span class="token punctuation">.</span>avi <span class="token operator">-</span>vf subtitles<span class="token operator">=</span>subtitle<span class="token punctuation">.</span>srt out<span class="token punctuation">.</span>avi
ffmpeg <span class="token operator">-</span>filter_complex <span class="token string">&quot;subtitles=&#39;a.srt File - 1 srtout.mp4&#39;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加logo水印" tabindex="-1"><a class="header-anchor" href="#添加logo水印" aria-hidden="true">#</a> 添加LOGO水印</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-i</span> I:/8.mp4 <span class="token parameter variable">-i</span> I:/logo.png <span class="token parameter variable">-filter_complex</span> overlay I:/8-logo.mp4
ffmpeg <span class="token parameter variable">-i</span> /mnt/hgfs/shared/resource/shenghua.avi <span class="token parameter variable">-i</span> /mnt/hgfs/shared/resource/my_logo.png <span class="token parameter variable">-filter_complex</span> overlay /mnt/hgfs/shared/resource/shenghua_die.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="视频合并" tabindex="-1"><a class="header-anchor" href="#视频合并" aria-hidden="true">#</a> 视频合并</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>ffmpeg <span class="token punctuation">-</span>f concat <span class="token punctuation">-</span>i filelist.txt <span class="token punctuation">-</span>c copy 0806<span class="token punctuation">-</span>0806<span class="token punctuation">-</span>2<span class="token punctuation">-</span>merge.mp4
filelist.txt的内容(需要换行)
file 0806.mp4
file 0806<span class="token punctuation">-</span>2.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="视频转换" tabindex="-1"><a class="header-anchor" href="#视频转换" aria-hidden="true">#</a> . 视频转换</h2><p>比如一个avi文件，想转为mp4，或者一个mp4想转为ts。 <code>ffmpeg -i input.avi output.mp4</code><code>ffmpeg -i input.mp4 output.ts</code></p><h2 id="_2-提取音频" tabindex="-1"><a class="header-anchor" href="#_2-提取音频" aria-hidden="true">#</a> 2. 提取音频</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>ffmpeg -i test.mp4 -acodec copy -vn output.aac\` 
上面的命令，默认mp4的audio codec是aac<span class="token punctuation">,</span>如果不是，可以都转为最常见的aac。 
\`ffmpeg -i test.mp4 -acodec aac -vn output.aac
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-提取视频" tabindex="-1"><a class="header-anchor" href="#_3-提取视频" aria-hidden="true">#</a> 3. 提取视频</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>ffmpeg -i input.mp4 -vcodec copy -an output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-视频剪切" tabindex="-1"><a class="header-anchor" href="#_4-视频剪切" aria-hidden="true">#</a> 4. 视频剪切</h2><p>下面的命令，可以从时间为00:00:15开始，截取5秒钟的视频。 <code>ffmpeg -ss 00:00:15 -t 00:00:05 -i input.mp4 -vcodec copy -acodec copy output.mp4</code> -ss表示开始切割的时间，-t表示要切多少。上面就是从15秒开始，切5秒钟出来。</p><h2 id="_5-码率控制" tabindex="-1"><a class="header-anchor" href="#_5-码率控制" aria-hidden="true">#</a> 5. 码率控制</h2><p>码率控制对于在线视频比较重要。因为在线视频需要考虑其能提供的带宽。</p><p>那么，什么是码率？很简单： bitrate = file size / duration 比如一个文件20.8M，时长1分钟，那么，码率就是： biterate = 20.8M bit/60s = 20.8<em>1024</em>1024*8 bit/60s= 2831Kbps 一般音频的码率只有固定几种，比如是128Kbps， 那么，video的就是 video biterate = 2831Kbps -128Kbps = 2703Kbps。</p><p>那么ffmpeg如何控制码率。 ffmpg控制码率有3种选择，-minrate -b:v -maxrate -b:v主要是控制平均码率。 比如一个视频源的码率太高了，有10Mbps，文件太大，想把文件弄小一点，但是又不破坏分辨率。 <code>ffmpeg -i input.mp4 -b:v 2000k output.mp4</code> 上面把码率从原码率转成2Mbps码率，这样其实也间接让文件变小了。目测接近一半。 不过，ffmpeg官方wiki比较建议，设置b:v时，同时加上 -bufsize -bufsize 用于设置码率控制缓冲器的大小，设置的好处是，让整体的码率更趋近于希望的值，减少波动。（简单来说，比如1 2的平均值是1.5， 1.49 1.51 也是1.5, 当然是第二种比较好） <code>ffmpeg -i input.mp4 -b:v 2000k -bufsize 2000k output.mp4</code></p><p>-minrate -maxrate就简单了，在线视频有时候，希望码率波动，不要超过一个阈值，可以设置maxrate。 <code>ffmpeg -i input.mp4 -b:v 2000k -bufsize 2000k -maxrate 2500k output.mp4</code></p><h2 id="_6-视频编码格式转换" tabindex="-1"><a class="header-anchor" href="#_6-视频编码格式转换" aria-hidden="true">#</a> 6. 视频编码格式转换</h2><p>比如一个视频的编码是MPEG4，想用H264编码，咋办？ <code>ffmpeg -i input.mp4 -vcodec h264 output.mp4</code> 相反也一样 <code>ffmpeg -i input.mp4 -vcodec mpeg4 output.mp4</code></p><p>当然了，如果ffmpeg当时编译时，添加了外部的x265或者X264，那也可以用外部的编码器来编码。（不知道什么是X265，可以 Google一下，简单的说，就是她不包含在ffmpeg的源码里，是独立的一个开源代码，用于编码HEVC，ffmpeg编码时可以调用它。当然 了，ffmpeg自己也有编码器） <code>ffmpeg -i input.mp4 -c:v libx265 output.mp4</code><code>ffmpeg -i input.mp4 -c:v libx264 output.mp4</code></p><h2 id="_7-只提取视频es数据" tabindex="-1"><a class="header-anchor" href="#_7-只提取视频es数据" aria-hidden="true">#</a> 7. 只提取视频ES数据</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>ffmpeg –i input.mp4 –vcodec copy –an –f m4v output.h264
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_8-过滤器的使用" tabindex="-1"><a class="header-anchor" href="#_8-过滤器的使用" aria-hidden="true">#</a> 8. 过滤器的使用</h2><h3 id="_8-1-将输入的1920x1080缩小到960x540输出" tabindex="-1"><a class="header-anchor" href="#_8-1-将输入的1920x1080缩小到960x540输出" aria-hidden="true">#</a> 8.1 将输入的1920x1080缩小到960x540输出:</h3><p><code>ffmpeg -i input.mp4 -vf scale=960:540 output.mp4</code> //ps: 如果540不写，写成-1，即scale=960:-1, 那也是可以的，ffmpeg会通知缩放滤镜在输出时保持原始的宽高比。</p><h3 id="_8-2-为视频添加logo" tabindex="-1"><a class="header-anchor" href="#_8-2-为视频添加logo" aria-hidden="true">#</a> 8.2 为视频添加logo</h3><p>比如，我有这么一个图片 <img src="https://img-blog.csdn.net/20160512155254687" alt="iqiyi logo" loading="lazy"> 想要贴到一个视频上，那可以用如下命令： ./ffmpeg -i input.mp4 -i iQIYI_logo.png -filter_complex overlay output.mp4 结果如下所示： <img src="https://img-blog.csdn.net/20160512155411797" alt="add logo left" loading="lazy"> 要贴到其他地方？看下面： 右上角： ./ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=W-w output.mp4 左下角： ./ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=0:H-h output.mp4 右下角： ./ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=W-w:H-h output.mp4</p><h3 id="_8-3-去掉视频的logo" tabindex="-1"><a class="header-anchor" href="#_8-3-去掉视频的logo" aria-hidden="true">#</a> 8.3 去掉视频的logo</h3><p>语法：-vf delogo=x:y:w:h[:t[:show]] x:y 离左上角的坐标 w:h logo的宽和高 t: 矩形边缘的厚度默认值4 show：若设置为1有一个绿色的矩形，默认值0。</p><p><code>ffmpeg -i input.mp4 -vf delogo=0:0:220:90:100:1 output.mp4</code> 结果如下所示： <img src="https://img-blog.csdn.net/20160512155451204" alt="de logo" loading="lazy"></p><h2 id="_9-截取视频图像" tabindex="-1"><a class="header-anchor" href="#_9-截取视频图像" aria-hidden="true">#</a> 9. 截取视频图像</h2><p><code>ffmpeg -i input.mp4 -r 1 -q:v 2 -f image2 pic-%03d.jpeg</code> -r 表示每一秒几帧 -q:v表示存储jpeg的图像质量，一般2是高质量。 如此，ffmpeg会把input.mp4，每隔一秒，存一张图片下来。假设有60s，那会有60张。</p><p>可以设置开始的时间，和你想要截取的时间。 <code>ffmpeg -i input.mp4 -ss 00:00:20 -t 10 -r 1 -q:v 2 -f image2 pic-%03d.jpeg</code> -ss 表示开始时间 -t 表示共要多少时间。 如此，ffmpeg会从input.mp4的第20s时间开始，往下10s，即20~30s这10秒钟之间，每隔1s就抓一帧，总共会抓10帧。</p><h2 id="_10-序列帧与视频的相互转换" tabindex="-1"><a class="header-anchor" href="#_10-序列帧与视频的相互转换" aria-hidden="true">#</a> 10. 序列帧与视频的相互转换</h2><p>把darkdoor.[001-100].jpg序列帧和001.mp3音频文件利用mpeg4编码方式合成视频文件darkdoor.avi： <strong>$ ffmpeg -i 001.mp3 -i darkdoor.%3d.jpg -s 1024x768 -author fy -vcodec mpeg4 darkdoor.avi</strong></p><p>还可以把视频文件导出成jpg序列帧： $ <strong>ffmpeg -i bc-cinematic-en.avi example.%d.jpg</strong></p><p><strong>1.分离视频音频流</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ffmpeg <span class="token operator">-</span>i input_file <span class="token operator">-</span>vcodec <span class="token builtin">copy</span> <span class="token operator">-</span>an output_file_video　　<span class="token comment">//分离视频流</span>
ffmpeg <span class="token operator">-</span>i input_file <span class="token operator">-</span>acodec <span class="token builtin">copy</span> <span class="token operator">-</span>vn output_file_audio　　<span class="token comment">//分离音频流</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.视频解复用</strong></p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>ffmpeg –i test.mp4 –vcodec copy –an –f m4v test.264
ffmpeg –i test.avi –vcodec copy –an –f m4v test.264
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.视频转码</strong></p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>ffmpeg –i test.mp4 –vcodec h264 –s 352<span class="token operator">*</span>278 –an –f m4v test.264              <span class="token comment">//转码为码流原始文件</span>
ffmpeg –i test.mp4 –vcodec h264 –bf 0 –g 25 –s 352<span class="token operator">*</span>278 –an –f m4v test.264  <span class="token comment">//转码为码流原始文件</span>
ffmpeg –i test.avi <span class="token operator">-</span>vcodec mpeg4 –vtag xvid –qsame test_xvid.avi            <span class="token comment">//转码为封装文件</span>
<span class="token comment">//-bf B帧数目控制，-g 关键帧间隔控制，-s 分辨率控制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.视频封装</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>ffmpeg –i video_file –i audio_file –vcodec copy –acodec copy output_file
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>5.视频剪切</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ffmpeg –i test<span class="token punctuation">.</span>avi –r <span class="token number">1</span> –f image2 image<span class="token operator">-</span><span class="token operator">%</span>3d<span class="token punctuation">.</span>jpeg        <span class="token comment">//提取图片</span>
ffmpeg <span class="token operator">-</span>ss <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">30</span> <span class="token operator">-</span>t <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">20</span> <span class="token operator">-</span>i input<span class="token punctuation">.</span>avi <span class="token operator">-</span>vcodec <span class="token builtin">copy</span> <span class="token operator">-</span>acodec <span class="token builtin">copy</span> output<span class="token punctuation">.</span>avi    <span class="token comment">//剪切视频</span>
<span class="token comment">//-r 提取图像的频率，-ss 开始时间，-t 持续时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6.视频录制</strong></p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>ffmpeg –i <span class="token property">rtsp</span><span class="token punctuation">:</span><span class="token comment">//192.168.3.205:5555/test –vcodec copy out.avi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>7.YUV序列播放</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>ffplay -f rawvideo -video_size 1920x1080 input.yuv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>8.YUV序列转AVI</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>ffmpeg –s w*h –pix_fmt yuv420p –i input.yuv –vcodec mpeg4 output.avi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>常用参数说明：</strong></p><p><strong>主要参数：</strong> -i 设定输入流 -f 设定输出格式 -ss 开始时间 <strong>视频参数：</strong> -b 设定视频流量，默认为200Kbit/s -r 设定帧速率，默认为25 -s 设定画面的宽与高 -aspect 设定画面的比例 -vn 不处理视频 -vcodec 设定视频编解码器，未设定时则使用与输入流相同的编解码器 <strong>音频参数：</strong> -ar 设定采样率 -ac 设定声音的Channel数 -acodec 设定声音编解码器，未设定时则使用与输入流相同的编解码器</p>`,99),t=[o];function r(c,l){return a(),n("div",null,t)}const u=s(p,[["render",r],["__file","ffmpeg-windows.html.vue"]]);export{u as default};
